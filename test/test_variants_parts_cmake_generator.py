import textwrap
import pytest
from pathlib import Path

from transformer import Variant, VariantPartsCMakeGenerator


@pytest.fixture
def generator():
    include_paths = [Path("path/to/include1"), Path("path/to/include2")]
    third_party_libs = [Path("path/to/lib1.a"), Path("path/to/lib2.a")]
    variant = Variant("my", "var")
    generator = VariantPartsCMakeGenerator(include_paths, third_party_libs, variant)
    return generator


def test_to_file(generator, tmp_path):
    file_path = tmp_path / "CMakeLists.txt"
    generator.to_file(file_path)
    assert file_path.exists()
    with open(file_path, "r") as f:
        assert f.read() == generator.to_string()


def test_to_string(generator: VariantPartsCMakeGenerator):
    expected_output = textwrap.dedent(
        """\
        # Generated by Transformer
        spl_add_include(${PROJECT_SOURCE_DIR}/legacy/${VARIANT}/path/to/include1)
        spl_add_include(${PROJECT_SOURCE_DIR}/legacy/${VARIANT}/path/to/include2)

        spl_add_component(legacy/my/var)
        target_link_libraries(${LINK_TARGET_NAME} ${CMAKE_CURRENT_LIST_DIR}/Lib/path/to/lib1.a)
        target_link_libraries(${LINK_TARGET_NAME} ${CMAKE_CURRENT_LIST_DIR}/Lib/path/to/lib2.a)
        """
    )
    assert generator.to_string() == expected_output


def test_cmake_includes(generator: VariantPartsCMakeGenerator):
    assert generator.cmake_includes() == textwrap.dedent(
        """\
        spl_add_include(${PROJECT_SOURCE_DIR}/legacy/${VARIANT}/path/to/include1)
        spl_add_include(${PROJECT_SOURCE_DIR}/legacy/${VARIANT}/path/to/include2)"""
    )


def test_cmake_link_libraries(generator: VariantPartsCMakeGenerator):
    assert generator.cmake_link_libraries() == textwrap.dedent(
        """\
        target_link_libraries(${LINK_TARGET_NAME} ${CMAKE_CURRENT_LIST_DIR}/Lib/path/to/lib1.a)
        target_link_libraries(${LINK_TARGET_NAME} ${CMAKE_CURRENT_LIST_DIR}/Lib/path/to/lib2.a)"""
    )
